# Usages:
# - run all tests and generate report in html format (by default)
# $ fastlane test
#
# - run all tests and generate report in junit format
# $ fastlane test junit:true
#
# - run test for specific test classes (Eg: GetAppTest, GetRecordTest) and generate report in html format
# $ fastlane test test_classes:"GetAppTest,GetRecordTest" html:true
#
# - run test for specific modules (Eg: record, file) and generate report in html format
# $ fastlane test test_modules:"record,file" html:true
#
# - run test for specific modules (Eg: record, file) in junit format and push test result to report portal
# $ export REPORT_PORTAL_TOKEN="<report_portal_token>"
# $ export REPORT_PORTAL_URL="<report_portal_url>/api/v1"
# $ fastlane test test_modules:"record,file" junit:true is_report_portal_enabled:true
#

default_platform(:ios)

# common configurations
project_name = "kintone-ios-sdk"
scheme = "kintone-ios-sdkTests"
destination = "platform=iOS Simulator,OS=12.4,name=iPhone X"

import "FastfileReportPortal"

platform :ios do
  desc "Run tests, optionally generating report."
  lane :test do |options|
    if options[:is_report_portal_enabled] then
      enable_report_portal
    end

    opts = {
      :project => options[:project] || "#{project_name}.xcodeproj",
      :scheme => options[:scheme] || scheme,
      :destination => destination,
      :buildlog_path => './report',
      :output_directory => './report',
      :output_style => 'basic',
      :code_coverage => true,
      :include_simulator_logs => false,
      :output_types => options[:junit] ? "junit" : "html",
      :only_testing => setTestOption(options, scheme)
    }

    scan(opts)

    if options[:is_report_portal_enabled] then
      disable_report_portal
    end
  end
end

# The function to set test option for only_testing option of lane test
#
# - Parameters 
#   + options | test options
#   + scheme | the scheme of project
# - Returns: the test option
def setTestOption(options, scheme)
  test_modules = options[:test_modules]
  test_classes = options[:test_classes]
  test_option = [scheme]
  if test_modules || test_classes then
    if test_modules then 
      test_option = generateTestClassesFromModules(test_modules, scheme)
    end
    if test_classes then
      test_option = generateTestClasses(test_classes, scheme)
    end
  end

  return test_option
end

# The function to get test classes with scheme from specified modules
#
# - Parameters 
#   + modules | all specified modules in a string that separated by comma
#   + scheme | the scheme of project
# - Returns: the string of test classes
def generateTestClassesFromModules(modules, scheme)
  test_modules = modules.split(",")
  test_classes_modules = ""

  test_modules.each do |item|
    file_names = getFileNames(item, scheme).join(",")
    test_classes = generateTestClasses(file_names, scheme)
    test_classes_modules = test_classes_modules << "#{test_classes},"
  end

  return test_classes_modules
end

# The function to get test classes with scheme
#
# - Parameters 
#   + class_names | all specified class names in a string that separated by comma
#   + scheme | the scheme of project
# - Returns: the string of test classes
def generateTestClasses(class_names, scheme)
  test_classes = class_names.gsub(",", ",#{scheme}/")
  test_classes = "#{scheme}/" << test_classes

  return test_classes
end

# The function to get all file names of a specified module folder
#
# - Parameter test_module | the module name
# - Returns: the array of file names
def getFileNames(test_module, scheme)
  dir = "../kintone-ios-sdkTests/test_scripts/module/#{test_module}/*" 
  file_names = Dir[dir].select{ |f| File.file? f }.map{ |f| File.basename(f, File.extname(f)) }

  return file_names 
end
